{"version":3,"sources":["components/Form.js","components/Task.js","components/TodoList.js","App.js","reportWebVitals.js","index.js"],"names":["Form","task","setTask","todoList","setTodoList","setStatus","onSubmit","e","preventDefault","text","completed","id","Math","random","alert","className","type","value","onChange","target","Task","onClick","taskId","prev","map","filter","TodoList","filteredTask","App","useState","status","setFilteredTask","useEffect","filterTodoList","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.088bee60.chunk.js","sourcesContent":["import React from 'react';\nimport '../App.css';\n\n\n\nconst Form = ({ task, setTask, todoList, setTodoList, setStatus }) => {\n\n    const handleTaskChange = ({ target }) => {\n        setTask(target.value);\n    }\n\n    const handleSubmit = (e) => {\n        e.preventDefault();\n        if (task) {\n            setTodoList([...todoList, {\n                text: task,\n                completed: false,\n                id: Math.random() * 1000\n            }]);\n            setTask('')\n        } else {\n            alert('Please type some notes before adding!')\n        }  \n    }\n\n    const handleStatusChange = ({ target }) => {\n        setStatus(target.value);\n    }\n\n    return (\n        <div>\n            <form onSubmit={handleSubmit} >\n                <input \n                    className='input'\n                    type='text'\n                    value={task}\n                    onChange={handleTaskChange}\n                />\n                <button\n                    className='button'\n                    type='submit'\n                >\n                Add Note\n                </button>\n                <select onChange={handleStatusChange}>\n                    <option value='All'>All</option>\n                    <option value='Done'>Done</option>\n                    <option value='Ongoing'>Ongoing</option>\n                </select>\n            </form>\n        </div>\n\n    )\n}\n\n\nexport default Form;","import React from 'react';\nimport '../App.css';\n\n\n\nconst Task = ({ task, setTodoList }) => {\n\n    const handleDelete = (taskId) => {\n        setTodoList(prev => prev.filter(task => task.id !== taskId))\n        \n    }\n\n    const handleCheck = (taskId) => {\n        setTodoList(prev => prev.map(task => {\n            if (task.id === taskId) {\n                return {\n                    ...task,\n                    completed: !task.completed\n                }\n            } \n            return task;    \n        }))\n    }\n\n    return (\n        <div>\n            <li className={task.completed ? 'crossed' : 'note'}>\n                {task.text}\n                    <button className='checkbtn' onClick={() => {handleCheck(task.id)}}>&#10003;</button>\n                    <button className='delbtn' onClick={() => {handleDelete(task.id)}}>X</button>\n            </li>\n        </div>\n    )\n}\n\n\nexport default Task;","import React from 'react';\nimport Task from './Task';\nimport '../App.css';\n\n\n\nconst TodoList = ({ todoList, setTodoList, filteredTask }) => {\n    \n\n    return (\n        <div>\n            <ul>\n                {filteredTask.map(task => (\n                    <Task \n                        key={task.id} \n                        task={task} \n                        setTodoList={setTodoList}\n                        \n                    />\n                ))}\n            </ul>\n        </div>\n    )\n}\n\n\n\nexport default TodoList;","import React, { useState, useEffect } from 'react';\nimport './App.css';\nimport Form from './components/Form';\nimport TodoList from './components/TodoList';\n\n\nfunction App() {\n\n  const [ task, setTask ] = useState('');\n\n  const [ todoList, setTodoList ] = useState([]);\n\n  const [ status, setStatus ] = useState('All');\n\n  const [ filteredTask, setFilteredTask ] = useState([]);\n\n  useEffect(() => {\n    filterTodoList();\n  }, [todoList, status]);\n\n\n  const filterTodoList = () => {\n    if (status === 'Done') {\n      setFilteredTask(todoList.filter(task => task.completed === true))\n    } else if (status === 'Ongoing') {\n      setFilteredTask(todoList.filter(task => task.completed === false))\n    } else {\n      setFilteredTask(todoList);\n    }\n  }\n\n  \n  return (\n    <div className=\"container\">\n      <h1>To Do App</h1>\n      <Form \n        task={task}\n        setTask={setTask}\n        todoList={todoList}\n        setTodoList={setTodoList}\n        setStatus={setStatus}\n      />\n      <TodoList \n        todoList={todoList}\n        setTodoList={setTodoList}\n        filteredTask={filteredTask}\n      />\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}